name: Expo CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    steps:
    # Step 1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        npm install
        npm install -g eas-cli@latest

    # Step 4: Create eas.json if it doesn't exist
    - name: Create eas.json
      run: |
        cat > eas.json << EOF
        {
          "cli": {
            "version": ">= 13.3.0",
            "appVersionSource": "remote"
          },
          "build": {
            "preview": {
              "distribution": "internal",
              "android": {
                "buildType": "apk",
                "gradleCommand": ":app:assembleRelease"
              }
            }
          }
        }
        EOF

    # Step 5: Build the APK
    - name: Build APK
      run: npx eas build -p android --profile preview --non-interactive

    # Step 6: Wait for build to complete and download
    - name: Wait for build and download APK
      run: |
        # Wait for the build to complete
        BUILD_ID=$(npx eas build:list --platform android --status in-queue,in-progress --non-interactive --json | jq -r '.[0].id')
        echo "Waiting for build $BUILD_ID to complete..."
        
        while true; do
          STATUS=$(npx eas build:list --id $BUILD_ID --non-interactive --json | jq -r '.[0].status')
          if [ "$STATUS" = "finished" ]; then
            break
          elif [ "$STATUS" = "errored" ]; then
            echo "Build failed"
            exit 1
          fi
          echo "Build status: $STATUS"
          sleep 30
        done
        
        # Download the APK
        npx eas build:download --id $BUILD_ID --output app.apk

    # Step 7: Upload APK as an artifact
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: app-apk
        path: ./app.apk
